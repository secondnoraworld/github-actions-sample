#!/bin/bash

set -eu

main() {
  pr_list_json=$(
    # Get merge commits
    # git --no-pager log --oneline --reverse --merges origin/"$BASE"..origin/"$HEAD" |
    git --no-pager log --oneline --reverse origin/"$BASE"..origin/"$HEAD" |

    # Extract merge commit hashes
    awk '{ print $1 }' |

    # Retrieve a JSON from an API
    #
    #   Memo:
    #     Call as many APIs as PRs
    #     I'm not sure how to put all calls together
    xargs -I {} gh api "https://api.github.com/repos/$REPOSITORY/commits/{}/pulls"
  )

  # WIP: Extract commits not associated with PRs (for squash commits)
  # commits_associated_with_prs=$(
  #   echo "$pr_list_json" |
  #   jq -r .[].number |
  #   xargs -I {} gh api "https://api.github.com/repos/$REPOSITORY/pulls/{}/commits" --jq .[].sha
  # )

  # no_merge_commits=$(
  #   git --no-pager log --oneline --reverse --no-merges --no-abbrev-commit origin/"$BASE"..origin/"$HEAD" |
  #   awk '{ print $1 }'
  # )

  # commits_not_associated_with_prs=$(
  #   echo "$no_merge_commits" |
  #   grep -v "$commits_associated_with_prs"
  # )

  # git --no-pager log --format="%H %s %an" --reverse origin/"$HEAD" | grep "$commits_not_associated_with_prs" | sed -e 's/^[0-9a-f]* //g'
  # END WIP

  comment

  # It should be performed at the end because it will exit if posting a message to Slack fails
  post_to_slack
}

comment() {
  if $DEBUG; then
    message github
  else
    gh pr comment "$PR" --body "$(message github)"
  fi
}

post_to_slack() {
# Do not indent in this section because extra spaces are interpolated to a Slack message
if $DEBUG; then
slack_message="
The following PRs will be released after <https://github.com/$REPOSITORY/pulls|(DEBUG: a PR number with the link is inserted here on production)> is merged.
$(message slack)
"
else
slack_message="
The following PRs will be released after <https://github.com/$REPOSITORY/pull/$PR|#$PR> is merged.
$(message slack)
"
fi

  if [ "$SLACK_CHANNEL" != "" ] && [ "$SLACK_TOKEN" != "" ]; then
    response=$(
      curl \
        -d "text=$slack_message " \
        -d "channel=$SLACK_CHANNEL" \
        -H "Authorization: Bearer $SLACK_TOKEN" \
        -X POST https://slack.com/api/chat.postMessage
    )
  fi

  ok=$(echo "$response" | jq -r .ok)

  if ! $ok; then
    echo "Error: Failed to post a message to Slack." >&2
    echo "       $response" >&2
    exit 1
  fi
}

message() {
  type=$1

  # paste -d " " <(pr_numbers "$type") <(titles "$type") <(authors "$type") | sed -e "s/^/$(lists "$type")/g"
  paste -d " " <(pr_numbers "$type") <(titles "$type") <(authors "$type") | sed -e "s/^/$(lists "$type")/g" | uniq
}

pr_numbers() {
  type=$1

  case $type in
    github)
      echo "$pr_list_json" | jq -r .[].number | sed -e 's/^/#/g'
      ;;
    slack)
      echo "$pr_list_json" | jq -r .[].number | xargs -I {} echo "<https://github.com/$REPOSITORY/pull/{}|#{}>"
      ;;
  esac
}

titles() {
  type=$1

  if $TITLE || [ "$type" = "slack" ]; then
    echo "$pr_list_json" | jq -r .[].title
  else
    echo ""
  fi
}

authors() {
  if ! $AUTHOR; then
    echo ""
    return
  fi

  type=$1

  case $type in
    github)
     echo "$pr_list_json" | jq -r .[].user.login | sed -e 's/^/@/g'
      ;;
    slack)
     echo "$pr_list_json" | jq -r .[].user.login | sed -e 's/^/by `@/g' | sed -e 's/$/`/g'
      ;;
  esac
}

lists() {
  type=$1

  if [ "$type" = "slack" ]; then
    echo "â€¢ "
  elif $CHECKBOX; then
    echo "* [ ] "
  else
    echo "* "
  fi
}

main "$@"
